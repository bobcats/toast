// this example uses the binary generated by the rust project in the parent directory
// said project is released on GitHub, and the correct URL is constructed based on
// the target operating system and the version in package.json

// your binary could be downloaded from any URL and could use any logic you want
// to construct said URL. You could even A/B test two different binary distribution
// solutions!

import os from "os";
// import { join } from "path";
import cTable from "console.table";
import { Binary } from "binary-install";
import { readFileSync, writeFileSync } from "fs";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

const error = (msg) => {
  console.error(msg);
  process.exit(1);
};

const packageJSON = join(
  dirname(dirname(fileURLToPath(import.meta.url))),
  "package.json"
);

const {
  version,
  name,
  repository,
  binaryHash,
  devBinaryTar,
  ...etc
} = JSON.parse(readFileSync(packageJSON));

const supportedPlatforms = [
  {
    TYPE: "Windows_NT",
    ARCHITECTURE: "x64",
    TARGET: "windows",
  },
  {
    TYPE: "Linux",
    ARCHITECTURE: "x64",
    TARGET: "linux",
  },
  {
    TYPE: "Darwin",
    ARCHITECTURE: "x64",
    TARGET: "macos",
  },
];

const getPlatform = () => {
  const type = os.type();
  const architecture = os.arch();

  for (let index in supportedPlatforms) {
    let supportedPlatform = supportedPlatforms[index];
    if (
      type === supportedPlatform.TYPE &&
      architecture === supportedPlatform.ARCHITECTURE
    ) {
      return supportedPlatform.TARGET;
    }
  }

  error(
    `Platform with type "${type}" and architecture "${architecture}" is not supported by ${name}.\nYour system must be one of the following:\n\n${cTable.getTable(
      supportedPlatforms
    )}`
  );
};

const getBinary = () => {
  const platform = getPlatform();
  // the url for this binary is constructed from values in `package.json`
  // https://github.com/EverlastingBugstopper/binary-install/releases/download/v1.0.0/binary-install-example-v1.0.0-x86_64-apple-darwin.tar.gz
  // const url = `${repository.url}/releases/download/v${version}/${name}-v${version}-${platform}.tar.gz`;
  const url = devBinaryTar
    ? devBinaryTar
    : `https://github.com/toastdotdev/toast/releases/download/binaries-ci-${binaryHash}/${platform}.tar.gz`;
  return new Binary(url, { name: "toast" });
};

export const run = () => {
  const binary = getBinary();
  binary.run();
};

export const setLocalBinaryPath = (path) => {
  let packageJSONContent = JSON.parse(readFileSync(packageJSON));
  packageJSONContent.devBinaryTar = `file://${path}`;
  writeFileSync(packageJSON, JSON.stringify(packageJSONContent));
};

export const install = () => {
  const binary = getBinary();
  binary.install();
};

export const uninstall = () => {
  const binary = getBinary();
  binary.uninstall();
};
